import cv2
import numpy as np
import pyttsx3
import time
import sys
import serial
from serial.tools import list_ports


def initialize_tts():
    """Initialize the text-to-speech engine"""
    try:
        engine = pyttsx3.init()
        engine.setProperty('rate', 150)  # Slower speech rate
        return engine
    except Exception as e:
        print(f"Error initializing TTS engine: {e}")
        return None


def list_available_ports():
    """List all available serial ports"""
    ports = list_ports.comports()
    return [port.device for port in ports]


def detect_arrow_direction(contour):
    """Determine arrow direction based on contour shape"""
    epsilon = 0.02 * cv2.arcLength(contour, True)
    approx = cv2.approxPolyDP(contour, epsilon, True)

    if len(approx) < 5:  # Arrows typically have more complex shapes
        return None

    M = cv2.moments(approx)
    if M["m00"] == 0:
        return None

    cx = int(M["m10"] / M["m00"])
    cy = int(M["m01"] / M["m00"])

    # Calculate orientation using PCA
    data = contour.reshape(-1, 2).astype(np.float32)
    mean, eigenvectors = cv2.PCACompute(data, mean=None)

    # Get the angle of the principal component
    angle = np.arctan2(eigenvectors[0, 1], eigenvectors[0, 0]) * (180 / np.pi)

    # Determine direction based on angle
    if -45 <= angle < 45:
        return "right"
    elif 45 <= angle < 135:
        return "back"
    elif -135 <= angle < -45:
        return "front"
    else:
        return "left"


def process_frame(frame):
    """Process frame to detect arrows"""
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Color thresholding for arrows (adjust these values based on your arrow colors)
    lower_red = np.array([0, 120, 70])
    upper_red = np.array([10, 255, 255])
    lower_red2 = np.array([170, 120, 70])
    upper_red2 = np.array([180, 255, 255])

    mask1 = cv2.inRange(hsv, lower_red, upper_red)
    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
    mask = cv2.bitwise_or(mask1, mask2)

    # Morphological operations to clean up the mask
    kernel = np.ones((5, 5), np.uint8)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    directions = []
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if not (300 < area < 50000):  # Adjusted area range
            continue

        # Check for arrow-like shape (convexity defects)
        hull = cv2.convexHull(cnt, returnPoints=False)
        if len(hull) > 3:
            defects = cv2.convexityDefects(cnt, hull)
            if defects is not None and len(defects) >= 2:  # Arrows typically have 2+ defects
                direction = detect_arrow_direction(cnt)
                if direction:
                    directions.append(direction)
                    cv2.drawContours(frame, [cnt], -1, (0, 255, 0), 2)
                    M = cv2.moments(cnt)
                    if M["m00"] != 0:
                        cx = int(M["m10"] / M["m00"])
                        cy = int(M["m01"] / M["m00"])
                        cv2.putText(frame, direction, (cx - 20, cy - 20),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

    return frame, directions


def test_arduino_connection(arduino):
    """Test if Arduino is responding"""
    try:
        arduino.write(b'T')  # Test command
        time.sleep(0.1)
        if arduino.in_waiting:
            response = arduino.readline().decode().strip()
            print(f"Arduino response: {response}")
            return True
    except Exception as e:
        print(f"Connection test failed: {e}")
    return False


def main():
    # List available ports
    available_ports = list_available_ports()
    if not available_ports:
        print("No COM ports found! Check your connections.")
        return

    print("Available COM ports:")
    for i, port in enumerate(available_ports, 1):
        print(f"{i}. {port}")

    try:
        selection = int(input("Select port number: ")) - 1
        serial_port = available_ports[selection]
    except (ValueError, IndexError):
        print("Invalid selection!")
        return

    try:
        arduino = serial.Serial(serial_port, 9600, timeout=1)
        time.sleep(2)  # Wait for connection

        # Test Arduino connection
        if not test_arduino_connection(arduino):
            print("Arduino not responding! Check your connections and code.")
            arduino.close()
            return

        print(f"Connected to Arduino on {serial_port}")
    except serial.SerialException as e:
        print(f"Error: Could not open port {serial_port}. {e}")
        return

    engine = initialize_tts()
    if engine:
        engine.say("System initialized")
        engine.runAndWait()

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Could not open camera.")
        arduino.close()
        return

    # Set camera resolution (adjust based on your camera)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

    last_announce = 0
    last_direction = None
    motor_active = False
    motor_stop_time = 0
    command_sent = False

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Error: Could not read frame.")
                break

            frame = cv2.flip(frame, 1)
            processed, directions = process_frame(frame)
            cv2.imshow('Arrow Detection', processed)

            current_time = time.time()

            # Stop motor if no arrow detected for 2 seconds
            if motor_active and current_time - motor_stop_time > 2:
                arduino.write(b'S')  # Stop command
                motor_active = False
                command_sent = False
                print("Motor stopped - no arrow detected")
                if engine:
                    engine.say("Stopping")
                    engine.runAndWait()

            if directions:
                direction = directions[0]  # Take the most prominent arrow
                command = None

                # Map arrow directions to motor commands
                if direction == "up":
                    command = b'F'  # Forward
                elif direction == "down":
                    command = b'B'  # Backward
                elif direction == "left":
                    command = b'L'  # Left
                elif direction == "right":
                    command = b'R'  # Right

                if command:
                    # Send command if direction changed or it's time to repeat
                    if direction != last_direction or not command_sent or current_time - last_announce > 3:
                        print(f"Sending command: {command.decode()} ({direction})")
                        arduino.write(command)

                        # Read response from Arduino
                        time.sleep(0.1)
                        if arduino.in_waiting:
                            response = arduino.readline().decode().strip()
                            print(f"Arduino: {response}")

                        motor_active = True
                        motor_stop_time = current_time
                        command_sent = True

                        if engine:
                            engine.say(f"Moving {direction}")
                            engine.runAndWait()

                        last_direction = direction
                        last_announce = current_time

            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            if cv2.getWindowProperty('Arrow Detection', cv2.WND_PROP_VISIBLE) < 1:
                break

    except KeyboardInterrupt:
        print("\nProgram interrupted by user")
    except Exception as e:
        print(f"Unexpected error: {e}")
    finally:
        # Cleanup
        print("Cleaning up...")
        # Send stop command before exiting
        arduino.write(b'S')
        time.sleep(0.5)  # Give time to stop
        cap.release()
        cv2.destroyAllWindows()
        arduino.close()
        if engine:
            engine.stop()
        sys.exit(0)


if __name__ == "__main__":
    main()
